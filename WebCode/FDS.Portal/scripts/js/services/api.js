/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.17.0 (NJsonSchema v9.10.57.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
System.register(["./api.base"], function (exports_1, context_1) {
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __moduleName = context_1 && context_1.id;
    function throwException(q, message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            return q.reject(result);
        else
            return q.reject(new SwaggerException(message, status, response, headers, null));
    }
    function blobToText(blob, q) {
        return new q(function (resolve) {
            var reader = new FileReader();
            reader.onload = function () {
                resolve(this.result);
            };
            reader.readAsText(blob);
        });
    }
    var api_base_1, AppAuthClient, AppDeliveryClient, AppLogClient, AppVisitClient, DictionariesClient, HelloClient, MembersClient, RecordsClient, TestClient, WebAppAuthClient, WebDeliverContactClient, WebEmployeeClient, WebUsersClient, WebVisitHistoryClient, WebVisitReasonClient, ResponseResult, LogInfoAddVM, EnumLogType, VisitHistoryInputVM, Dictionary, Member, Record, AppAuthVM, EmplyoeeSearchVM, EmployeeInfo, EnumGender, UserUpdateVM, UserAddVM, UserTiketVM, HistorySearchVM, CheckInType, VisitReasonInfo, SwaggerException;
    return {
        setters: [
            function (api_base_1_1) {
                api_base_1 = api_base_1_1;
            }
        ],
        execute: function () {/* tslint:disable */
            //----------------------
            // <auto-generated>
            //     Generated using the NSwag toolchain v11.17.17.0 (NJsonSchema v9.10.57.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
            // </auto-generated>
            //----------------------
            // ReSharper disable InconsistentNaming
            AppAuthClient = /** @class */ (function (_super) {
                __extends(AppAuthClient, _super);
                function AppAuthClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 更新authkey时，用于验证密码
                 */
                AppAuthClient.prototype.checkPsw = function (psw) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppAuth/CheckPsw?";
                    if (psw === undefined)
                        throw new Error("The parameter 'psw' must be defined.");
                    else
                        url_ += "psw=" + encodeURIComponent("" + psw) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processCheckPsw(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processCheckPsw(_response);
                        throw _response;
                    });
                };
                AppAuthClient.prototype.processCheckPsw = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return AppAuthClient;
            }(api_base_1.ApiBase));
            exports_1("AppAuthClient", AppAuthClient);
            AppDeliveryClient = /** @class */ (function (_super) {
                __extends(AppDeliveryClient, _super);
                function AppDeliveryClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 获取快递联系人信息
                 */
                AppDeliveryClient.prototype.deliveryContact = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppDelivery/DeliveryContact";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeliveryContact(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeliveryContact(_response);
                        throw _response;
                    });
                };
                AppDeliveryClient.prototype.processDeliveryContact = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return AppDeliveryClient;
            }(api_base_1.ApiBase));
            exports_1("AppDeliveryClient", AppDeliveryClient);
            AppLogClient = /** @class */ (function (_super) {
                __extends(AppLogClient, _super);
                function AppLogClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * app端添加日志
                 */
                AppLogClient.prototype.addLog = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppLog/AddLog";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processAddLog(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processAddLog(_response);
                        throw _response;
                    });
                };
                AppLogClient.prototype.processAddLog = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return AppLogClient;
            }(api_base_1.ApiBase));
            exports_1("AppLogClient", AppLogClient);
            AppVisitClient = /** @class */ (function (_super) {
                __extends(AppVisitClient, _super);
                function AppVisitClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 记录visit时checkin等各种用户操作
                 */
                AppVisitClient.prototype.visitorCheckin = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppVisit/VisitorCheckin";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processVisitorCheckin(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processVisitorCheckin(_response);
                        throw _response;
                    });
                };
                AppVisitClient.prototype.processVisitorCheckin = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 查找联系人
                 */
                AppVisitClient.prototype.fetchEmployees = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppVisit/FetchEmployees";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processFetchEmployees(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processFetchEmployees(_response);
                        throw _response;
                    });
                };
                AppVisitClient.prototype.processFetchEmployees = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取部门列表
                 */
                AppVisitClient.prototype.fetchDepartments = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppVisit/FetchDepartments";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processFetchDepartments(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processFetchDepartments(_response);
                        throw _response;
                    });
                };
                AppVisitClient.prototype.processFetchDepartments = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取拜访原因列表
                 */
                AppVisitClient.prototype.fetchVisitReasons = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/AppVisit/FetchVisitReason";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processFetchVisitReasons(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processFetchVisitReasons(_response);
                        throw _response;
                    });
                };
                AppVisitClient.prototype.processFetchVisitReasons = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return AppVisitClient;
            }(api_base_1.ApiBase));
            exports_1("AppVisitClient", AppVisitClient);
            DictionariesClient = /** @class */ (function (_super) {
                __extends(DictionariesClient, _super);
                function DictionariesClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                DictionariesClient.prototype.getDictionaries = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionaries(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionaries(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionaries = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (resultData200 && resultData200.constructor === Array) {
                            result200 = [];
                            for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                                var item = resultData200_1[_i];
                                result200.push(Dictionary.fromJS(item));
                            }
                        }
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                DictionariesClient.prototype.postDictionary = function (dictionary) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(dictionary);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPostDictionary(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPostDictionary(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processPostDictionary = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                DictionariesClient.prototype.getDictionary = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionary(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionary(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionary = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                DictionariesClient.prototype.putDictionary = function (id, dictionary) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(dictionary);
                    var options_ = {
                        url: url_,
                        method: "PUT",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutDictionary(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutDictionary(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processPutDictionary = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                DictionariesClient.prototype.deleteDictionary = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "DELETE",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteDictionary(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteDictionary(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processDeleteDictionary = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取行业类别和职位类别
                 * @size (optional)
                 */
                DictionariesClient.prototype.getDictionariesType = function (page, size) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesType?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionariesType(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionariesType(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionariesType = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取所有行业类别和职位类别
                 * @size (optional)
                 */
                DictionariesClient.prototype.getDictionariesTypeAll = function (page, size) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesTypeAll?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionariesTypeAll(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionariesTypeAll(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionariesTypeAll = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取新闻类别
                 * @size (optional)
                 */
                DictionariesClient.prototype.getDictionariesNewTypeAll = function (page, size) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesNewTypeAll?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionariesNewTypeAll(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionariesNewTypeAll(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionariesNewTypeAll = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取所有字典数据
                 * @size (optional)
                 * @gatetory (optional)
                 */
                DictionariesClient.prototype.getDictionarieAll = function (page, size, gatetory) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/GetDictionarieAll?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    if (gatetory !== undefined)
                        url_ += "gatetory=" + encodeURIComponent("" + gatetory) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetDictionarieAll(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetDictionarieAll(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processGetDictionarieAll = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 添加类别
                 * @category (optional)
                 * @name (optional)
                 * @value (optional)
                 * @description (optional)
                 */
                DictionariesClient.prototype.putDictionarys = function (category, name, value, description) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/putDictionarys?";
                    if (category !== undefined)
                        url_ += "category=" + encodeURIComponent("" + category) + "&";
                    if (name !== undefined)
                        url_ += "name=" + encodeURIComponent("" + name) + "&";
                    if (value !== undefined)
                        url_ += "value=" + encodeURIComponent("" + value) + "&";
                    if (description !== undefined)
                        url_ += "description=" + encodeURIComponent("" + description) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutDictionarys(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutDictionarys(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processPutDictionarys = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 更新类别
                 * @id (optional)
                 * @category (optional)
                 * @name (optional)
                 * @value (optional)
                 * @description (optional)
                 */
                DictionariesClient.prototype.updateDictionarys = function (id, category, name, value, description) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Dictionaries/updateDictionarys?";
                    if (id !== undefined)
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    if (category !== undefined)
                        url_ += "category=" + encodeURIComponent("" + category) + "&";
                    if (name !== undefined)
                        url_ += "name=" + encodeURIComponent("" + name) + "&";
                    if (value !== undefined)
                        url_ += "value=" + encodeURIComponent("" + value) + "&";
                    if (description !== undefined)
                        url_ += "description=" + encodeURIComponent("" + description) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processUpdateDictionarys(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processUpdateDictionarys(_response);
                        throw _response;
                    });
                };
                DictionariesClient.prototype.processUpdateDictionarys = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return DictionariesClient;
            }(api_base_1.ApiBase));
            exports_1("DictionariesClient", DictionariesClient);
            HelloClient = /** @class */ (function (_super) {
                __extends(HelloClient, _super);
                function HelloClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                HelloClient.prototype.index = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Hello";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processIndex(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processIndex(_response);
                        throw _response;
                    });
                };
                HelloClient.prototype.processIndex = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                return HelloClient;
            }(api_base_1.ApiBase));
            exports_1("HelloClient", HelloClient);
            MembersClient = /** @class */ (function (_super) {
                __extends(MembersClient, _super);
                function MembersClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                MembersClient.prototype.getMembers = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetMembers(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetMembers(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processGetMembers = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (resultData200 && resultData200.constructor === Array) {
                            result200 = [];
                            for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                                var item = resultData200_2[_i];
                                result200.push(Member.fromJS(item));
                            }
                        }
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                MembersClient.prototype.postMember = function (member) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(member);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPostMember(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPostMember(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processPostMember = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                MembersClient.prototype.getMember = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetMember(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetMember(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processGetMember = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                MembersClient.prototype.putMember = function (id, member) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(member);
                    var options_ = {
                        url: url_,
                        method: "PUT",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutMember(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutMember(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processPutMember = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                MembersClient.prototype.deleteMember = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "DELETE",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteMember(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteMember(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processDeleteMember = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 根据会员名称和手机号获取所有会员列表
                 * @size (optional)
                 * @name (optional)
                 * @phone (optional)
                 */
                MembersClient.prototype.getMembersAll = function (page, size, name, phone) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/GetMembersAll?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    if (name !== undefined)
                        url_ += "name=" + encodeURIComponent("" + name) + "&";
                    if (phone !== undefined)
                        url_ += "phone=" + encodeURIComponent("" + phone) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetMembersAll(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetMembersAll(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processGetMembersAll = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 新增会员
                 * @name (optional)
                 * @phone (optional)
                 * @money (optional)
                 * @number (optional)
                 * @remark (optional)
                 * @whiteSpiritMoney (optional)
                 * @whiteSpiritNumber (optional)
                 * @cashMoney (optional)
                 */
                MembersClient.prototype.putInsertMembers = function (name, phone, money, number, remark, whiteSpiritMoney, whiteSpiritNumber, cashMoney) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/PutInsertMembers?";
                    if (name !== undefined)
                        url_ += "name=" + encodeURIComponent("" + name) + "&";
                    if (phone !== undefined)
                        url_ += "phone=" + encodeURIComponent("" + phone) + "&";
                    if (money !== undefined)
                        url_ += "money=" + encodeURIComponent("" + money) + "&";
                    if (number === null)
                        throw new Error("The parameter 'number' cannot be null.");
                    else if (number !== undefined)
                        url_ += "number=" + encodeURIComponent("" + number) + "&";
                    if (remark !== undefined)
                        url_ += "remark=" + encodeURIComponent("" + remark) + "&";
                    if (whiteSpiritMoney !== undefined)
                        url_ += "whiteSpiritMoney=" + encodeURIComponent("" + whiteSpiritMoney) + "&";
                    if (whiteSpiritNumber === null)
                        throw new Error("The parameter 'whiteSpiritNumber' cannot be null.");
                    else if (whiteSpiritNumber !== undefined)
                        url_ += "whiteSpiritNumber=" + encodeURIComponent("" + whiteSpiritNumber) + "&";
                    if (cashMoney !== undefined)
                        url_ += "cashMoney=" + encodeURIComponent("" + cashMoney) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutInsertMembers(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutInsertMembers(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processPutInsertMembers = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 更新会员信息
                 * @name (optional)
                 * @phone (optional)
                 * @money (optional)
                 * @number (optional)
                 * @remark (optional)
                 * @whiteSpiritMoney (optional)
                 * @whiteSpiritNumber (optional)
                 * @cashMoney (optional)
                 */
                MembersClient.prototype.putUpdateMembers = function (id, name, phone, money, number, remark, whiteSpiritMoney, whiteSpiritNumber, cashMoney) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Members/PutUpdateMembers?";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined and cannot be null.");
                    else
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    if (name !== undefined)
                        url_ += "name=" + encodeURIComponent("" + name) + "&";
                    if (phone !== undefined)
                        url_ += "phone=" + encodeURIComponent("" + phone) + "&";
                    if (money !== undefined)
                        url_ += "money=" + encodeURIComponent("" + money) + "&";
                    if (number === null)
                        throw new Error("The parameter 'number' cannot be null.");
                    else if (number !== undefined)
                        url_ += "number=" + encodeURIComponent("" + number) + "&";
                    if (remark !== undefined)
                        url_ += "remark=" + encodeURIComponent("" + remark) + "&";
                    if (whiteSpiritMoney !== undefined)
                        url_ += "whiteSpiritMoney=" + encodeURIComponent("" + whiteSpiritMoney) + "&";
                    if (whiteSpiritNumber === null)
                        throw new Error("The parameter 'whiteSpiritNumber' cannot be null.");
                    else if (whiteSpiritNumber !== undefined)
                        url_ += "whiteSpiritNumber=" + encodeURIComponent("" + whiteSpiritNumber) + "&";
                    if (cashMoney !== undefined)
                        url_ += "cashMoney=" + encodeURIComponent("" + cashMoney) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutUpdateMembers(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutUpdateMembers(_response);
                        throw _response;
                    });
                };
                MembersClient.prototype.processPutUpdateMembers = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return MembersClient;
            }(api_base_1.ApiBase));
            exports_1("MembersClient", MembersClient);
            RecordsClient = /** @class */ (function (_super) {
                __extends(RecordsClient, _super);
                function RecordsClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                RecordsClient.prototype.getRecords = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetRecords(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetRecords(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processGetRecords = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (resultData200 && resultData200.constructor === Array) {
                            result200 = [];
                            for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                                var item = resultData200_3[_i];
                                result200.push(Record.fromJS(item));
                            }
                        }
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.postRecord = function (record) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(record);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPostRecord(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPostRecord(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processPostRecord = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.getRecord = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetRecord(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetRecord(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processGetRecord = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.putRecord = function (id, record) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(record);
                    var options_ = {
                        url: url_,
                        method: "PUT",
                        responseType: "arraybuffer",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutRecord(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutRecord(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processPutRecord = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.deleteRecord = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "DELETE",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteRecord(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteRecord(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processDeleteRecord = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.getRecordList = function (page, size, id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/getRecordList?";
                    if (page === undefined)
                        throw new Error("The parameter 'page' must be defined.");
                    else
                        url_ += "page=" + encodeURIComponent("" + page) + "&";
                    if (size !== undefined)
                        url_ += "size=" + encodeURIComponent("" + size) + "&";
                    if (id !== undefined)
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetRecordList(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetRecordList(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processGetRecordList = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                RecordsClient.prototype.export = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/export?";
                    if (id !== undefined)
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processExport(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processExport(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processExport = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 更新会员信息
                 * @money (optional)
                 * @remark (optional)
                 * @type (optional)
                 */
                RecordsClient.prototype.putInsertRecords = function (id, money, remark, type) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Records/putInsertRecords?";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined and cannot be null.");
                    else
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    if (money !== undefined)
                        url_ += "money=" + encodeURIComponent("" + money) + "&";
                    if (remark !== undefined)
                        url_ += "remark=" + encodeURIComponent("" + remark) + "&";
                    if (type === null)
                        throw new Error("The parameter 'type' cannot be null.");
                    else if (type !== undefined)
                        url_ += "type=" + encodeURIComponent("" + type) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPutInsertRecords(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processPutInsertRecords(_response);
                        throw _response;
                    });
                };
                RecordsClient.prototype.processPutInsertRecords = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return RecordsClient;
            }(api_base_1.ApiBase));
            exports_1("RecordsClient", RecordsClient);
            TestClient = /** @class */ (function (_super) {
                __extends(TestClient, _super);
                function TestClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                TestClient.prototype.test = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Test/Test";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processTest(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processTest(_response);
                        throw _response;
                    });
                };
                TestClient.prototype.processTest = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return TestClient;
            }(api_base_1.ApiBase));
            exports_1("TestClient", TestClient);
            WebAppAuthClient = /** @class */ (function (_super) {
                __extends(WebAppAuthClient, _super);
                function WebAppAuthClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                WebAppAuthClient.prototype.upateAppAuth = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebAppAuth/UpateAppAuth";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processUpateAppAuth(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processUpateAppAuth(_response);
                        throw _response;
                    });
                };
                WebAppAuthClient.prototype.processUpateAppAuth = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebAppAuthClient.prototype.getAppAuth = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebAppAuth/GetAppAuth";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetAppAuth(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetAppAuth(_response);
                        throw _response;
                    });
                };
                WebAppAuthClient.prototype.processGetAppAuth = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebAppAuthClient;
            }(api_base_1.ApiBase));
            exports_1("WebAppAuthClient", WebAppAuthClient);
            WebDeliverContactClient = /** @class */ (function (_super) {
                __extends(WebDeliverContactClient, _super);
                function WebDeliverContactClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 获取快递联系人
                 */
                WebDeliverContactClient.prototype.get = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebDeliverContact/Get";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGet(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGet(_response);
                        throw _response;
                    });
                };
                WebDeliverContactClient.prototype.processGet = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 保存快递联系人
                 */
                WebDeliverContactClient.prototype.saveDeliver = function (name, officePhone, personalPhone, iconUrl) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebDeliverContact/SaveDeliver?";
                    if (name === undefined)
                        throw new Error("The parameter 'name' must be defined.");
                    else
                        url_ += "Name=" + encodeURIComponent("" + name) + "&";
                    if (officePhone === undefined)
                        throw new Error("The parameter 'officePhone' must be defined.");
                    else
                        url_ += "OfficePhone=" + encodeURIComponent("" + officePhone) + "&";
                    if (personalPhone === undefined)
                        throw new Error("The parameter 'personalPhone' must be defined.");
                    else
                        url_ += "PersonalPhone=" + encodeURIComponent("" + personalPhone) + "&";
                    if (iconUrl === undefined)
                        throw new Error("The parameter 'iconUrl' must be defined.");
                    else
                        url_ += "iconUrl=" + encodeURIComponent("" + iconUrl) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processSaveDeliver(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processSaveDeliver(_response);
                        throw _response;
                    });
                };
                WebDeliverContactClient.prototype.processSaveDeliver = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebDeliverContactClient.prototype.import = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebDeliverContact/Import";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processImport(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processImport(_response);
                        throw _response;
                    });
                };
                WebDeliverContactClient.prototype.processImport = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebDeliverContactClient;
            }(api_base_1.ApiBase));
            exports_1("WebDeliverContactClient", WebDeliverContactClient);
            WebEmployeeClient = /** @class */ (function (_super) {
                __extends(WebEmployeeClient, _super);
                function WebEmployeeClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 分页查询联系人
                 */
                WebEmployeeClient.prototype.getEmployeePage = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/GetEmployeePage";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetEmployeePage(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetEmployeePage(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processGetEmployeePage = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 添加联系人
                 */
                WebEmployeeClient.prototype.addEmployee = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/AddEmployee";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processAddEmployee(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processAddEmployee(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processAddEmployee = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 删除联系人
                 */
                WebEmployeeClient.prototype.deleteEmployeeByEmpNo = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/DeleteEmployeeByEmpNo?";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined and cannot be null.");
                    else
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteEmployeeByEmpNo(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteEmployeeByEmpNo(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processDeleteEmployeeByEmpNo = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 编辑联系人
                 */
                WebEmployeeClient.prototype.editEmployee = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/EditEmployee";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processEditEmployee(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processEditEmployee(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processEditEmployee = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 获取部门列表
                 */
                WebEmployeeClient.prototype.fetchDepartments = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/FetchDepartments";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processFetchDepartments(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processFetchDepartments(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processFetchDepartments = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebEmployeeClient.prototype.export = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/Export";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        responseType: "arraybuffer",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processExport(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processExport(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processExport = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (status === 200 || status === 206) {
                        var contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                        var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                        var fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                        return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
                    }
                    else if (status !== 200 && status !== 204) {
                        return blobToText(new Blob([response]), this.q).then(function (_responseText) {
                            return throwException(_this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return this.q.resolve(null);
                };
                WebEmployeeClient.prototype.import = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebEmployee/Import";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processImport(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processImport(_response);
                        throw _response;
                    });
                };
                WebEmployeeClient.prototype.processImport = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebEmployeeClient;
            }(api_base_1.ApiBase));
            exports_1("WebEmployeeClient", WebEmployeeClient);
            WebUsersClient = /** @class */ (function (_super) {
                __extends(WebUsersClient, _super);
                function WebUsersClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 获取所有用户
                 */
                WebUsersClient.prototype.getUsers = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/GetUsers";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetUsers(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetUsers(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processGetUsers = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 根据id查询用户
                 */
                WebUsersClient.prototype.getUserById = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/GetUserById?";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined and cannot be null.");
                    else
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetUserById(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetUserById(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processGetUserById = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 更新用户
                 */
                WebUsersClient.prototype.updateUser = function (user) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/UpdateUser";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(user);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processUpdateUser(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processUpdateUser(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processUpdateUser = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 新增用户
                 */
                WebUsersClient.prototype.addUser = function (user) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/AddUser";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(user);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processAddUser(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processAddUser(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processAddUser = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebUsersClient.prototype.deleteUser = function (id) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/DeleteUser?";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined and cannot be null.");
                    else
                        url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteUser(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteUser(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processDeleteUser = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebUsersClient.prototype.login = function (userName, password) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/Login?";
                    if (userName === undefined)
                        throw new Error("The parameter 'userName' must be defined.");
                    else
                        url_ += "userName=" + encodeURIComponent("" + userName) + "&";
                    if (password === undefined)
                        throw new Error("The parameter 'password' must be defined.");
                    else
                        url_ += "password=" + encodeURIComponent("" + password) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processLogin(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processLogin(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processLogin = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                WebUsersClient.prototype.loginSso = function (userTiketVM) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebUsers/loginSso";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(userTiketVM);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processLoginSso(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processLoginSso(_response);
                        throw _response;
                    });
                };
                WebUsersClient.prototype.processLoginSso = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebUsersClient;
            }(api_base_1.ApiBase));
            exports_1("WebUsersClient", WebUsersClient);
            WebVisitHistoryClient = /** @class */ (function (_super) {
                __extends(WebVisitHistoryClient, _super);
                function WebVisitHistoryClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 分页查询拜访记录
                 */
                WebVisitHistoryClient.prototype.searchHistoryPage = function (vm) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebVisitHistory/SearchHistoryPage";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(vm);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processSearchHistoryPage(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processSearchHistoryPage(_response);
                        throw _response;
                    });
                };
                WebVisitHistoryClient.prototype.processSearchHistoryPage = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebVisitHistoryClient;
            }(api_base_1.ApiBase));
            exports_1("WebVisitHistoryClient", WebVisitHistoryClient);
            WebVisitReasonClient = /** @class */ (function (_super) {
                __extends(WebVisitReasonClient, _super);
                function WebVisitReasonClient(configuration, $http, $q, baseUrl) {
                    var _this = _super.call(this, configuration) || this;
                    _this.baseUrl = undefined;
                    _this.jsonParseReviver = undefined;
                    _this.http = $http;
                    _this.q = $q;
                    _this.baseUrl = baseUrl ? baseUrl : "http://";
                    return _this;
                }
                /**
                 * 获取VisitReason
                 */
                WebVisitReasonClient.prototype.getAll = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebVisitReason/GetAll";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "GET",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetAll(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processGetAll(_response);
                        throw _response;
                    });
                };
                WebVisitReasonClient.prototype.processGetAll = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 添加VisitReason
                 */
                WebVisitReasonClient.prototype.addReason = function (reason) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebVisitReason/AddReason?";
                    if (reason === undefined)
                        throw new Error("The parameter 'reason' must be defined.");
                    else
                        url_ += "reason=" + encodeURIComponent("" + reason) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processAddReason(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processAddReason(_response);
                        throw _response;
                    });
                };
                WebVisitReasonClient.prototype.processAddReason = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 删除VisitReason
                 */
                WebVisitReasonClient.prototype.deleteReason = function (reasonId) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebVisitReason/DeleteReason?";
                    if (reasonId === undefined || reasonId === null)
                        throw new Error("The parameter 'reasonId' must be defined and cannot be null.");
                    else
                        url_ += "reasonId=" + encodeURIComponent("" + reasonId) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        url: url_,
                        method: "POST",
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processDeleteReason(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processDeleteReason(_response);
                        throw _response;
                    });
                };
                WebVisitReasonClient.prototype.processDeleteReason = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                /**
                 * 修改VisitReason
                 */
                WebVisitReasonClient.prototype.editReason = function (reason) {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/WebVisitReason/EditReason";
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(reason);
                    var options_ = {
                        url: url_,
                        method: "POST",
                        data: content_,
                        transformResponse: [],
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http(transformedOptions_);
                    }).then(function (_response) {
                        return _this.processEditReason(_response);
                    }, function (_response) {
                        if (_response.status)
                            return _this.processEditReason(_response);
                        throw _response;
                    });
                };
                WebVisitReasonClient.prototype.processEditReason = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (status === 200) {
                        var _responseText = response.data;
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? ResponseResult.fromJS(resultData200) : null;
                        return this.q.resolve(result200);
                    }
                    else if (status !== 200 && status !== 204) {
                        var _responseText = response.data;
                        return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                    }
                    return this.q.resolve(null);
                };
                return WebVisitReasonClient;
            }(api_base_1.ApiBase));
            exports_1("WebVisitReasonClient", WebVisitReasonClient);
            ResponseResult = /** @class */ (function () {
                function ResponseResult(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                ResponseResult.prototype.init = function (data) {
                    if (data) {
                        this.errcode = data["errcode"];
                        this.errmsg = data["errmsg"];
                        this.errdescription = data["errdescription"];
                        this.data = data["data"];
                    }
                };
                ResponseResult.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new ResponseResult();
                    result.init(data);
                    return result;
                };
                ResponseResult.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["errcode"] = this.errcode;
                    data["errmsg"] = this.errmsg;
                    data["errdescription"] = this.errdescription;
                    data["data"] = this.data;
                    return data;
                };
                ResponseResult.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new ResponseResult();
                    result.init(json);
                    return result;
                };
                return ResponseResult;
            }());
            exports_1("ResponseResult", ResponseResult);
            LogInfoAddVM = /** @class */ (function () {
                function LogInfoAddVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                LogInfoAddVM.prototype.init = function (data) {
                    if (data) {
                        this.logType = data["LogType"];
                        this.info = data["Info"];
                    }
                };
                LogInfoAddVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new LogInfoAddVM();
                    result.init(data);
                    return result;
                };
                LogInfoAddVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["LogType"] = this.logType;
                    data["Info"] = this.info;
                    return data;
                };
                LogInfoAddVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new LogInfoAddVM();
                    result.init(json);
                    return result;
                };
                return LogInfoAddVM;
            }());
            exports_1("LogInfoAddVM", LogInfoAddVM);
            (function (EnumLogType) {
                EnumLogType[EnumLogType["Erro"] = 0] = "Erro";
                EnumLogType[EnumLogType["Warning"] = 1] = "Warning";
                EnumLogType[EnumLogType["Message"] = 2] = "Message";
            })(EnumLogType || (EnumLogType = {}));
            exports_1("EnumLogType", EnumLogType);
            VisitHistoryInputVM = /** @class */ (function () {
                function VisitHistoryInputVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                VisitHistoryInputVM.prototype.init = function (data) {
                    if (data) {
                        this.visitorName = data["VisitorName"];
                        this.visitorPhone = data["VisitorPhone"];
                        this.visitReason = data["VisitReason"];
                        this.visitStatus = data["VisitStatus"];
                        this.empNo = data["EmpNo"];
                    }
                };
                VisitHistoryInputVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new VisitHistoryInputVM();
                    result.init(data);
                    return result;
                };
                VisitHistoryInputVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["VisitorName"] = this.visitorName;
                    data["VisitorPhone"] = this.visitorPhone;
                    data["VisitReason"] = this.visitReason;
                    data["VisitStatus"] = this.visitStatus;
                    data["EmpNo"] = this.empNo;
                    return data;
                };
                VisitHistoryInputVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new VisitHistoryInputVM();
                    result.init(json);
                    return result;
                };
                return VisitHistoryInputVM;
            }());
            exports_1("VisitHistoryInputVM", VisitHistoryInputVM);
            Dictionary = /** @class */ (function () {
                function Dictionary(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                Dictionary.prototype.init = function (data) {
                    if (data) {
                        this.iD = data["ID"];
                        this.category = data["Category"];
                        this.name = data["Name"];
                        this.value = data["Value"];
                        this.description = data["Description"];
                        this.isEnabled = data["IsEnabled"];
                    }
                };
                Dictionary.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new Dictionary();
                    result.init(data);
                    return result;
                };
                Dictionary.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["ID"] = this.iD;
                    data["Category"] = this.category;
                    data["Name"] = this.name;
                    data["Value"] = this.value;
                    data["Description"] = this.description;
                    data["IsEnabled"] = this.isEnabled;
                    return data;
                };
                Dictionary.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new Dictionary();
                    result.init(json);
                    return result;
                };
                return Dictionary;
            }());
            exports_1("Dictionary", Dictionary);
            Member = /** @class */ (function () {
                function Member(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                Member.prototype.init = function (data) {
                    if (data) {
                        this.iD = data["ID"];
                        this.name = data["name"];
                        this.phone = data["phone"];
                        this.money = data["money"];
                        this.number = data["number"];
                        this.type = data["type"];
                        this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
                        this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : undefined;
                        this.remark = data["remark"];
                        this.whiteSpiritMoney = data["whiteSpiritMoney"];
                        this.cashMoney = data["cashMoney"];
                        this.whiteSpiritNumber = data["whiteSpiritNumber"];
                        this.whiteSpiritType = data["whiteSpiritType"];
                    }
                };
                Member.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new Member();
                    result.init(data);
                    return result;
                };
                Member.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["ID"] = this.iD;
                    data["name"] = this.name;
                    data["phone"] = this.phone;
                    data["money"] = this.money;
                    data["number"] = this.number;
                    data["type"] = this.type;
                    data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
                    data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : undefined;
                    data["remark"] = this.remark;
                    data["whiteSpiritMoney"] = this.whiteSpiritMoney;
                    data["cashMoney"] = this.cashMoney;
                    data["whiteSpiritNumber"] = this.whiteSpiritNumber;
                    data["whiteSpiritType"] = this.whiteSpiritType;
                    return data;
                };
                Member.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new Member();
                    result.init(json);
                    return result;
                };
                return Member;
            }());
            exports_1("Member", Member);
            Record = /** @class */ (function () {
                function Record(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                Record.prototype.init = function (data) {
                    if (data) {
                        this.id = data["id"];
                        this.memberId = data["memberId"];
                        this.money = data["money"];
                        this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
                        this.description = data["Description"];
                        this.type = data["type"];
                    }
                };
                Record.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new Record();
                    result.init(data);
                    return result;
                };
                Record.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["id"] = this.id;
                    data["memberId"] = this.memberId;
                    data["money"] = this.money;
                    data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
                    data["Description"] = this.description;
                    data["type"] = this.type;
                    return data;
                };
                Record.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new Record();
                    result.init(json);
                    return result;
                };
                return Record;
            }());
            exports_1("Record", Record);
            AppAuthVM = /** @class */ (function () {
                function AppAuthVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                AppAuthVM.prototype.init = function (data) {
                    if (data) {
                        this.authKey = data["AuthKey"];
                        this.psw = data["Psw"];
                    }
                };
                AppAuthVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new AppAuthVM();
                    result.init(data);
                    return result;
                };
                AppAuthVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["AuthKey"] = this.authKey;
                    data["Psw"] = this.psw;
                    return data;
                };
                AppAuthVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new AppAuthVM();
                    result.init(json);
                    return result;
                };
                return AppAuthVM;
            }());
            exports_1("AppAuthVM", AppAuthVM);
            EmplyoeeSearchVM = /** @class */ (function () {
                function EmplyoeeSearchVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                EmplyoeeSearchVM.prototype.init = function (data) {
                    if (data) {
                        this.page = data["Page"];
                        this.size = data["Size"];
                        this.name = data["Name"];
                        this.empNo = data["EmpNo"];
                        this.dept = data["Dept"];
                    }
                };
                EmplyoeeSearchVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new EmplyoeeSearchVM();
                    result.init(data);
                    return result;
                };
                EmplyoeeSearchVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Page"] = this.page;
                    data["Size"] = this.size;
                    data["Name"] = this.name;
                    data["EmpNo"] = this.empNo;
                    data["Dept"] = this.dept;
                    return data;
                };
                EmplyoeeSearchVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new EmplyoeeSearchVM();
                    result.init(json);
                    return result;
                };
                return EmplyoeeSearchVM;
            }());
            exports_1("EmplyoeeSearchVM", EmplyoeeSearchVM);
            EmployeeInfo = /** @class */ (function () {
                function EmployeeInfo(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                EmployeeInfo.prototype.init = function (data) {
                    if (data) {
                        this.id = data["Id"];
                        this.empNo = data["EmpNo"];
                        this.empName = data["EmpName"];
                        this.gender = data["Gender"];
                        this.title = data["Title"];
                        this.officePhone = data["OfficePhone"];
                        this.personalPhone = data["PersonalPhone"];
                        this.department = data["Department"];
                        this.level = data["Level"];
                        this.workPlace = data["WorkPlace"];
                        this.imgPath = data["ImgPath"];
                    }
                };
                EmployeeInfo.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new EmployeeInfo();
                    result.init(data);
                    return result;
                };
                EmployeeInfo.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Id"] = this.id;
                    data["EmpNo"] = this.empNo;
                    data["EmpName"] = this.empName;
                    data["Gender"] = this.gender;
                    data["Title"] = this.title;
                    data["OfficePhone"] = this.officePhone;
                    data["PersonalPhone"] = this.personalPhone;
                    data["Department"] = this.department;
                    data["Level"] = this.level;
                    data["WorkPlace"] = this.workPlace;
                    data["ImgPath"] = this.imgPath;
                    return data;
                };
                EmployeeInfo.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new EmployeeInfo();
                    result.init(json);
                    return result;
                };
                return EmployeeInfo;
            }());
            exports_1("EmployeeInfo", EmployeeInfo);
            (function (EnumGender) {
                EnumGender[EnumGender["Unknown"] = 0] = "Unknown";
                EnumGender[EnumGender["Male"] = 1] = "Male";
                EnumGender[EnumGender["Female"] = 2] = "Female";
            })(EnumGender || (EnumGender = {}));
            exports_1("EnumGender", EnumGender);
            UserUpdateVM = /** @class */ (function () {
                function UserUpdateVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                UserUpdateVM.prototype.init = function (data) {
                    if (data) {
                        this.id = data["Id"];
                        this.role = data["Role"];
                        this.comments = data["Comments"];
                        this.account = data["Account"];
                    }
                };
                UserUpdateVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new UserUpdateVM();
                    result.init(data);
                    return result;
                };
                UserUpdateVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Id"] = this.id;
                    data["Role"] = this.role;
                    data["Comments"] = this.comments;
                    data["Account"] = this.account;
                    return data;
                };
                UserUpdateVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new UserUpdateVM();
                    result.init(json);
                    return result;
                };
                return UserUpdateVM;
            }());
            exports_1("UserUpdateVM", UserUpdateVM);
            UserAddVM = /** @class */ (function () {
                function UserAddVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                UserAddVM.prototype.init = function (data) {
                    if (data) {
                        this.role = data["Role"];
                        this.comments = data["Comments"];
                        this.account = data["Account"];
                    }
                };
                UserAddVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new UserAddVM();
                    result.init(data);
                    return result;
                };
                UserAddVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Role"] = this.role;
                    data["Comments"] = this.comments;
                    data["Account"] = this.account;
                    return data;
                };
                UserAddVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new UserAddVM();
                    result.init(json);
                    return result;
                };
                return UserAddVM;
            }());
            exports_1("UserAddVM", UserAddVM);
            UserTiketVM = /** @class */ (function () {
                function UserTiketVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                UserTiketVM.prototype.init = function (data) {
                    if (data) {
                        this.serviceTicket = data["ServiceTicket"];
                        this.serviceUrl = data["ServiceUrl"];
                    }
                };
                UserTiketVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new UserTiketVM();
                    result.init(data);
                    return result;
                };
                UserTiketVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["ServiceTicket"] = this.serviceTicket;
                    data["ServiceUrl"] = this.serviceUrl;
                    return data;
                };
                UserTiketVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new UserTiketVM();
                    result.init(json);
                    return result;
                };
                return UserTiketVM;
            }());
            exports_1("UserTiketVM", UserTiketVM);
            HistorySearchVM = /** @class */ (function () {
                function HistorySearchVM(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                HistorySearchVM.prototype.init = function (data) {
                    if (data) {
                        this.page = data["Page"];
                        this.size = data["Size"];
                        this.startTime = data["StartTime"] ? new Date(data["StartTime"].toString()) : undefined;
                        this.endTime = data["EndTime"] ? new Date(data["EndTime"].toString()) : undefined;
                        this.visitName = data["VisitName"];
                        this.employeeName = data["EmployeeName"];
                        this.checkInType = data["CheckInType"];
                    }
                };
                HistorySearchVM.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new HistorySearchVM();
                    result.init(data);
                    return result;
                };
                HistorySearchVM.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Page"] = this.page;
                    data["Size"] = this.size;
                    data["StartTime"] = this.startTime ? this.startTime.toISOString() : undefined;
                    data["EndTime"] = this.endTime ? this.endTime.toISOString() : undefined;
                    data["VisitName"] = this.visitName;
                    data["EmployeeName"] = this.employeeName;
                    data["CheckInType"] = this.checkInType;
                    return data;
                };
                HistorySearchVM.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new HistorySearchVM();
                    result.init(json);
                    return result;
                };
                return HistorySearchVM;
            }());
            exports_1("HistorySearchVM", HistorySearchVM);
            (function (CheckInType) {
                CheckInType[CheckInType["CheckIn"] = 0] = "CheckIn";
                CheckInType[CheckInType["FindEmp"] = 1] = "FindEmp";
                CheckInType[CheckInType["Call"] = 2] = "Call";
            })(CheckInType || (CheckInType = {}));
            exports_1("CheckInType", CheckInType);
            VisitReasonInfo = /** @class */ (function () {
                function VisitReasonInfo(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                VisitReasonInfo.prototype.init = function (data) {
                    if (data) {
                        this.id = data["Id"];
                        this.visitReason = data["VisitReason"];
                    }
                };
                VisitReasonInfo.fromJS = function (data) {
                    data = typeof data === 'object' ? data : {};
                    var result = new VisitReasonInfo();
                    result.init(data);
                    return result;
                };
                VisitReasonInfo.prototype.toJSON = function (data) {
                    data = typeof data === 'object' ? data : {};
                    data["Id"] = this.id;
                    data["VisitReason"] = this.visitReason;
                    return data;
                };
                VisitReasonInfo.prototype.clone = function () {
                    var json = this.toJSON();
                    var result = new VisitReasonInfo();
                    result.init(json);
                    return result;
                };
                return VisitReasonInfo;
            }());
            exports_1("VisitReasonInfo", VisitReasonInfo);
            SwaggerException = /** @class */ (function (_super) {
                __extends(SwaggerException, _super);
                function SwaggerException(message, status, response, headers, result) {
                    var _this = _super.call(this) || this;
                    _this.isSwaggerException = true;
                    _this.message = message;
                    _this.status = status;
                    _this.response = response;
                    _this.headers = headers;
                    _this.result = result;
                    return _this;
                }
                SwaggerException.isSwaggerException = function (obj) {
                    return obj.isSwaggerException === true;
                };
                return SwaggerException;
            }(Error));
            exports_1("SwaggerException", SwaggerException);
            //
        }
    };
});
//# sourceMappingURL=api.js.map