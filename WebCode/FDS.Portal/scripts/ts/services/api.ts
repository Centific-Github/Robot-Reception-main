/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.17.0 (NJsonSchema v9.10.57.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import ng from "angular";
import {ApiBase} from "./api.base";
import { ConfigBase } from "./api.config";

export class AppAuthClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 更新authkey时，用于验证密码
     */
    checkPsw(psw: string | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppAuth/CheckPsw?";
        if (psw === undefined)
            throw new Error("The parameter 'psw' must be defined.");
        else
            url_ += "psw=" + encodeURIComponent("" + psw) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processCheckPsw(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCheckPsw(_response);
            throw _response;
        });
    }

    protected processCheckPsw(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class AppDeliveryClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 获取快递联系人信息
     */
    deliveryContact(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppDelivery/DeliveryContact";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeliveryContact(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeliveryContact(_response);
            throw _response;
        });
    }

    protected processDeliveryContact(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class AppLogClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * app端添加日志
     */
    addLog(vm: LogInfoAddVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppLog/AddLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processAddLog(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddLog(_response);
            throw _response;
        });
    }

    protected processAddLog(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class AppVisitClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 记录visit时checkin等各种用户操作
     */
    visitorCheckin(vm: VisitHistoryInputVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppVisit/VisitorCheckin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processVisitorCheckin(_response);
        }, (_response) => {
            if (_response.status)
                return this.processVisitorCheckin(_response);
            throw _response;
        });
    }

    protected processVisitorCheckin(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 查找联系人
     */
    fetchEmployees(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppVisit/FetchEmployees";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processFetchEmployees(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFetchEmployees(_response);
            throw _response;
        });
    }

    protected processFetchEmployees(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取部门列表
     */
    fetchDepartments(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppVisit/FetchDepartments";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processFetchDepartments(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFetchDepartments(_response);
            throw _response;
        });
    }

    protected processFetchDepartments(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取拜访原因列表
     */
    fetchVisitReasons(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/AppVisit/FetchVisitReason";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processFetchVisitReasons(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFetchVisitReasons(_response);
            throw _response;
        });
    }

    protected processFetchVisitReasons(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class DictionariesClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    getDictionaries(): ng.IPromise<Dictionary[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionaries(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionaries(_response);
            throw _response;
        });
    }

    protected processGetDictionaries(response: any): ng.IPromise<Dictionary[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Dictionary.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Dictionary[] | null>(<any>null);
    }

    postDictionary(dictionary: Dictionary | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Dictionaries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dictionary);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPostDictionary(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPostDictionary(_response);
            throw _response;
        });
    }

    protected processPostDictionary(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    getDictionary(id: number): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionary(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionary(_response);
            throw _response;
        });
    }

    protected processGetDictionary(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    putDictionary(id: number, dictionary: Dictionary | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dictionary);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutDictionary(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutDictionary(_response);
            throw _response;
        });
    }

    protected processPutDictionary(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    deleteDictionary(id: number): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteDictionary(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteDictionary(_response);
            throw _response;
        });
    }

    protected processDeleteDictionary(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 获取行业类别和职位类别
     * @size (optional) 
     */
    getDictionariesType(page: number | null, size?: number | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesType?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionariesType(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionariesType(_response);
            throw _response;
        });
    }

    protected processGetDictionariesType(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取所有行业类别和职位类别
     * @size (optional) 
     */
    getDictionariesTypeAll(page: number | null, size?: number | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesTypeAll?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionariesTypeAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionariesTypeAll(_response);
            throw _response;
        });
    }

    protected processGetDictionariesTypeAll(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取新闻类别
     * @size (optional) 
     */
    getDictionariesNewTypeAll(page: number | null, size?: number | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/GetDictionariesNewTypeAll?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionariesNewTypeAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionariesNewTypeAll(_response);
            throw _response;
        });
    }

    protected processGetDictionariesNewTypeAll(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取所有字典数据
     * @size (optional) 
     * @gatetory (optional) 
     */
    getDictionarieAll(page: number | null, size?: number | null | undefined, gatetory?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/GetDictionarieAll?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        if (gatetory !== undefined)
            url_ += "gatetory=" + encodeURIComponent("" + gatetory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetDictionarieAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetDictionarieAll(_response);
            throw _response;
        });
    }

    protected processGetDictionarieAll(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 添加类别
     * @category (optional) 
     * @name (optional) 
     * @value (optional) 
     * @description (optional) 
     */
    putDictionarys(category?: string | null | undefined, name?: string | null | undefined, value?: string | null | undefined, description?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/putDictionarys?";
        if (category !== undefined)
            url_ += "category=" + encodeURIComponent("" + category) + "&"; 
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&"; 
        if (description !== undefined)
            url_ += "description=" + encodeURIComponent("" + description) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutDictionarys(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutDictionarys(_response);
            throw _response;
        });
    }

    protected processPutDictionarys(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 更新类别
     * @id (optional) 
     * @category (optional) 
     * @name (optional) 
     * @value (optional) 
     * @description (optional) 
     */
    updateDictionarys(id?: number | null | undefined, category?: string | null | undefined, name?: string | null | undefined, value?: string | null | undefined, description?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/updateDictionarys?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (category !== undefined)
            url_ += "category=" + encodeURIComponent("" + category) + "&"; 
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&"; 
        if (description !== undefined)
            url_ += "description=" + encodeURIComponent("" + description) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processUpdateDictionarys(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUpdateDictionarys(_response);
            throw _response;
        });
    }

    protected processUpdateDictionarys(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class HelloClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    index(): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Hello";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processIndex(_response);
        }, (_response) => {
            if (_response.status)
                return this.processIndex(_response);
            throw _response;
        });
    }

    protected processIndex(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }
}

export class MembersClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    getMembers(): ng.IPromise<Member[] | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetMembers(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetMembers(_response);
            throw _response;
        });
    }

    protected processGetMembers(response: any): ng.IPromise<Member[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Member.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Member[] | null>(<any>null);
    }

    postMember(member: Member | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPostMember(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPostMember(_response);
            throw _response;
        });
    }

    protected processPostMember(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    getMember(id: number): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetMember(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetMember(_response);
            throw _response;
        });
    }

    protected processGetMember(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    putMember(id: number, member: Member | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutMember(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutMember(_response);
            throw _response;
        });
    }

    protected processPutMember(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    deleteMember(id: number): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteMember(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteMember(_response);
            throw _response;
        });
    }

    protected processDeleteMember(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 根据会员名称和手机号获取所有会员列表
     * @size (optional) 
     * @name (optional) 
     * @phone (optional) 
     */
    getMembersAll(page: number | null, size?: number | null | undefined, name?: string | null | undefined, phone?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Members/GetMembersAll?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetMembersAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetMembersAll(_response);
            throw _response;
        });
    }

    protected processGetMembersAll(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 新增会员
     * @name (optional) 
     * @phone (optional) 
     * @money (optional) 
     * @number (optional) 
     * @remark (optional) 
     * @whiteSpiritMoney (optional) 
     * @whiteSpiritNumber (optional) 
     * @cashMoney (optional) 
     */
    putInsertMembers(name?: string | null | undefined, phone?: string | null | undefined, money?: string | null | undefined, number?: number | undefined, remark?: string | null | undefined, whiteSpiritMoney?: string | null | undefined, whiteSpiritNumber?: number | undefined, cashMoney?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Members/PutInsertMembers?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&"; 
        if (money !== undefined)
            url_ += "money=" + encodeURIComponent("" + money) + "&"; 
        if (number === null)
            throw new Error("The parameter 'number' cannot be null.");
        else if (number !== undefined)
            url_ += "number=" + encodeURIComponent("" + number) + "&"; 
        if (remark !== undefined)
            url_ += "remark=" + encodeURIComponent("" + remark) + "&"; 
        if (whiteSpiritMoney !== undefined)
            url_ += "whiteSpiritMoney=" + encodeURIComponent("" + whiteSpiritMoney) + "&"; 
        if (whiteSpiritNumber === null)
            throw new Error("The parameter 'whiteSpiritNumber' cannot be null.");
        else if (whiteSpiritNumber !== undefined)
            url_ += "whiteSpiritNumber=" + encodeURIComponent("" + whiteSpiritNumber) + "&"; 
        if (cashMoney !== undefined)
            url_ += "cashMoney=" + encodeURIComponent("" + cashMoney) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutInsertMembers(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutInsertMembers(_response);
            throw _response;
        });
    }

    protected processPutInsertMembers(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 更新会员信息
     * @name (optional) 
     * @phone (optional) 
     * @money (optional) 
     * @number (optional) 
     * @remark (optional) 
     * @whiteSpiritMoney (optional) 
     * @whiteSpiritNumber (optional) 
     * @cashMoney (optional) 
     */
    putUpdateMembers(id: number, name?: string | null | undefined, phone?: string | null | undefined, money?: string | null | undefined, number?: number | undefined, remark?: string | null | undefined, whiteSpiritMoney?: string | null | undefined, whiteSpiritNumber?: number | undefined, cashMoney?: string | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Members/PutUpdateMembers?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&"; 
        if (money !== undefined)
            url_ += "money=" + encodeURIComponent("" + money) + "&"; 
        if (number === null)
            throw new Error("The parameter 'number' cannot be null.");
        else if (number !== undefined)
            url_ += "number=" + encodeURIComponent("" + number) + "&"; 
        if (remark !== undefined)
            url_ += "remark=" + encodeURIComponent("" + remark) + "&"; 
        if (whiteSpiritMoney !== undefined)
            url_ += "whiteSpiritMoney=" + encodeURIComponent("" + whiteSpiritMoney) + "&"; 
        if (whiteSpiritNumber === null)
            throw new Error("The parameter 'whiteSpiritNumber' cannot be null.");
        else if (whiteSpiritNumber !== undefined)
            url_ += "whiteSpiritNumber=" + encodeURIComponent("" + whiteSpiritNumber) + "&"; 
        if (cashMoney !== undefined)
            url_ += "cashMoney=" + encodeURIComponent("" + cashMoney) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutUpdateMembers(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutUpdateMembers(_response);
            throw _response;
        });
    }

    protected processPutUpdateMembers(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class RecordsClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    getRecords(): ng.IPromise<Record[] | null> {
        let url_ = this.baseUrl + "/api/Records";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetRecords(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetRecords(_response);
            throw _response;
        });
    }

    protected processGetRecords(response: any): ng.IPromise<Record[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Record.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Record[] | null>(<any>null);
    }

    postRecord(record: Record | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Records";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(record);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPostRecord(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPostRecord(_response);
            throw _response;
        });
    }

    protected processPostRecord(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    getRecord(id: number): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Records/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetRecord(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetRecord(_response);
            throw _response;
        });
    }

    protected processGetRecord(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    putRecord(id: number, record: Record | null): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Records/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(record);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutRecord(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutRecord(_response);
            throw _response;
        });
    }

    protected processPutRecord(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    deleteRecord(id: number): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Records/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteRecord(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteRecord(_response);
            throw _response;
        });
    }

    protected processDeleteRecord(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    getRecordList(page: number | null, size?: number | null | undefined, id?: number | null | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Records/getRecordList?";
        if (page === undefined)
            throw new Error("The parameter 'page' must be defined.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetRecordList(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetRecordList(_response);
            throw _response;
        });
    }

    protected processGetRecordList(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    export(id?: number | null | undefined): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Records/export?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processExport(_response);
        }, (_response) => {
            if (_response.status)
                return this.processExport(_response);
            throw _response;
        });
    }

    protected processExport(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 更新会员信息
     * @money (optional) 
     * @remark (optional) 
     * @type (optional) 
     */
    putInsertRecords(id: number, money?: string | null | undefined, remark?: string | null | undefined, type?: number | undefined): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/Records/putInsertRecords?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (money !== undefined)
            url_ += "money=" + encodeURIComponent("" + money) + "&"; 
        if (remark !== undefined)
            url_ += "remark=" + encodeURIComponent("" + remark) + "&"; 
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processPutInsertRecords(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPutInsertRecords(_response);
            throw _response;
        });
    }

    protected processPutInsertRecords(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class TestClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    test(): ng.IPromise<any | null> {
        let url_ = this.baseUrl + "/api/Test/Test";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processTest(_response);
        }, (_response) => {
            if (_response.status)
                return this.processTest(_response);
            throw _response;
        });
    }

    protected processTest(response: any): ng.IPromise<any | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<any | null>(<any>null);
    }
}

export class WebAppAuthClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    upateAppAuth(vm: AppAuthVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebAppAuth/UpateAppAuth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processUpateAppAuth(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUpateAppAuth(_response);
            throw _response;
        });
    }

    protected processUpateAppAuth(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    getAppAuth(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebAppAuth/GetAppAuth";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetAppAuth(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetAppAuth(_response);
            throw _response;
        });
    }

    protected processGetAppAuth(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class WebDeliverContactClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 获取快递联系人
     */
    get(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebDeliverContact/Get";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGet(_response);
            throw _response;
        });
    }

    protected processGet(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 保存快递联系人
     */
    saveDeliver(name: string | null, officePhone: string | null, personalPhone: string | null, iconUrl: string | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebDeliverContact/SaveDeliver?";
        if (name === undefined)
            throw new Error("The parameter 'name' must be defined.");
        else
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (officePhone === undefined)
            throw new Error("The parameter 'officePhone' must be defined.");
        else
            url_ += "OfficePhone=" + encodeURIComponent("" + officePhone) + "&"; 
        if (personalPhone === undefined)
            throw new Error("The parameter 'personalPhone' must be defined.");
        else
            url_ += "PersonalPhone=" + encodeURIComponent("" + personalPhone) + "&"; 
        if (iconUrl === undefined)
            throw new Error("The parameter 'iconUrl' must be defined.");
        else
            url_ += "iconUrl=" + encodeURIComponent("" + iconUrl) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processSaveDeliver(_response);
        }, (_response) => {
            if (_response.status)
                return this.processSaveDeliver(_response);
            throw _response;
        });
    }

    protected processSaveDeliver(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    import(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebDeliverContact/Import";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processImport(_response);
        }, (_response) => {
            if (_response.status)
                return this.processImport(_response);
            throw _response;
        });
    }

    protected processImport(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class WebEmployeeClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 分页查询联系人
     */
    getEmployeePage(vm: EmplyoeeSearchVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/GetEmployeePage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetEmployeePage(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetEmployeePage(_response);
            throw _response;
        });
    }

    protected processGetEmployeePage(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 添加联系人
     */
    addEmployee(vm: EmployeeInfo | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/AddEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processAddEmployee(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddEmployee(_response);
            throw _response;
        });
    }

    protected processAddEmployee(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 删除联系人
     */
    deleteEmployeeByEmpNo(id: number): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/DeleteEmployeeByEmpNo?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteEmployeeByEmpNo(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteEmployeeByEmpNo(_response);
            throw _response;
        });
    }

    protected processDeleteEmployeeByEmpNo(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 编辑联系人
     */
    editEmployee(vm: EmployeeInfo | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/EditEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processEditEmployee(_response);
        }, (_response) => {
            if (_response.status)
                return this.processEditEmployee(_response);
            throw _response;
        });
    }

    protected processEditEmployee(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 获取部门列表
     */
    fetchDepartments(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/FetchDepartments";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processFetchDepartments(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFetchDepartments(_response);
            throw _response;
        });
    }

    protected processFetchDepartments(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    export(): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/Export";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processExport(_response);
        }, (_response) => {
            if (_response.status)
                return this.processExport(_response);
            throw _response;
        });
    }

    protected processExport(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    import(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebEmployee/Import";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processImport(_response);
        }, (_response) => {
            if (_response.status)
                return this.processImport(_response);
            throw _response;
        });
    }

    protected processImport(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class WebUsersClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 获取所有用户
     */
    getUsers(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebUsers/GetUsers";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetUsers(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetUsers(_response);
            throw _response;
        });
    }

    protected processGetUsers(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 根据id查询用户
     */
    getUserById(id: number): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebUsers/GetUserById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetUserById(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetUserById(_response);
            throw _response;
        });
    }

    protected processGetUserById(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 更新用户
     */
    updateUser(user: UserUpdateVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebUsers/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processUpdateUser(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUpdateUser(_response);
            throw _response;
        });
    }

    protected processUpdateUser(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 新增用户
     */
    addUser(user: UserAddVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebUsers/AddUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processAddUser(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddUser(_response);
            throw _response;
        });
    }

    protected processAddUser(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    deleteUser(id: number): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebUsers/DeleteUser?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteUser(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteUser(_response);
            throw _response;
        });
    }

    protected processDeleteUser(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    login(userName: string | null, password: string | null): ng.IPromise<any | null> {
        let url_ = this.baseUrl + "/api/WebUsers/Login?";
        if (userName === undefined)
            throw new Error("The parameter 'userName' must be defined.");
        else
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (password === undefined)
            throw new Error("The parameter 'password' must be defined.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processLogin(_response);
        }, (_response) => {
            if (_response.status)
                return this.processLogin(_response);
            throw _response;
        });
    }

    protected processLogin(response: any): ng.IPromise<any | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<any | null>(<any>null);
    }

    loginSso(userTiketVM: UserTiketVM | null): ng.IPromise<any | null> {
        let url_ = this.baseUrl + "/api/WebUsers/loginSso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userTiketVM);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processLoginSso(_response);
        }, (_response) => {
            if (_response.status)
                return this.processLoginSso(_response);
            throw _response;
        });
    }

    protected processLoginSso(response: any): ng.IPromise<any | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<any | null>(<any>null);
    }
}

export class WebVisitHistoryClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 分页查询拜访记录
     */
    searchHistoryPage(vm: HistorySearchVM | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebVisitHistory/SearchHistoryPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processSearchHistoryPage(_response);
        }, (_response) => {
            if (_response.status)
                return this.processSearchHistoryPage(_response);
            throw _response;
        });
    }

    protected processSearchHistoryPage(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class WebVisitReasonClient extends ApiBase {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigBase, $http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        super(configuration);
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * 获取VisitReason
     */
    getAll(): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebVisitReason/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processGetAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetAll(_response);
            throw _response;
        });
    }

    protected processGetAll(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 添加VisitReason
     */
    addReason(reason: string | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebVisitReason/AddReason?";
        if (reason === undefined)
            throw new Error("The parameter 'reason' must be defined.");
        else
            url_ += "reason=" + encodeURIComponent("" + reason) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processAddReason(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddReason(_response);
            throw _response;
        });
    }

    protected processAddReason(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 删除VisitReason
     */
    deleteReason(reasonId: number): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebVisitReason/DeleteReason?";
        if (reasonId === undefined || reasonId === null)
            throw new Error("The parameter 'reasonId' must be defined and cannot be null.");
        else
            url_ += "reasonId=" + encodeURIComponent("" + reasonId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processDeleteReason(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteReason(_response);
            throw _response;
        });
    }

    protected processDeleteReason(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }

    /**
     * 修改VisitReason
     */
    editReason(reason: VisitReasonInfo | null): ng.IPromise<ResponseResult | null> {
        let url_ = this.baseUrl + "/api/WebVisitReason/EditReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reason);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
            return this.processEditReason(_response);
        }, (_response) => {
            if (_response.status)
                return this.processEditReason(_response);
            throw _response;
        });
    }

    protected processEditReason(response: any): ng.IPromise<ResponseResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<ResponseResult | null>(<any>null);
    }
}

export class ResponseResult implements IResponseResult {
    errcode!: number;
    errmsg?: string | undefined;
    errdescription?: string | undefined;
    data?: any | undefined;

    constructor(data?: IResponseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.errcode = data["errcode"];
            this.errmsg = data["errmsg"];
            this.errdescription = data["errdescription"];
            this.data = data["data"];
        }
    }

    static fromJS(data: any): ResponseResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errcode"] = this.errcode;
        data["errmsg"] = this.errmsg;
        data["errdescription"] = this.errdescription;
        data["data"] = this.data;
        return data; 
    }

    clone(): ResponseResult {
        const json = this.toJSON();
        let result = new ResponseResult();
        result.init(json);
        return result;
    }
}

export interface IResponseResult {
    errcode: number;
    errmsg?: string | undefined;
    errdescription?: string | undefined;
    data?: any | undefined;
}

export class LogInfoAddVM implements ILogInfoAddVM {
    logType!: EnumLogType;
    info?: string | undefined;

    constructor(data?: ILogInfoAddVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.logType = data["LogType"];
            this.info = data["Info"];
        }
    }

    static fromJS(data: any): LogInfoAddVM {
        data = typeof data === 'object' ? data : {};
        let result = new LogInfoAddVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LogType"] = this.logType;
        data["Info"] = this.info;
        return data; 
    }

    clone(): LogInfoAddVM {
        const json = this.toJSON();
        let result = new LogInfoAddVM();
        result.init(json);
        return result;
    }
}

export interface ILogInfoAddVM {
    logType: EnumLogType;
    info?: string | undefined;
}

export enum EnumLogType {
    Erro = 0, 
    Warning = 1, 
    Message = 2, 
}

export class VisitHistoryInputVM implements IVisitHistoryInputVM {
    visitorName?: string | undefined;
    visitorPhone?: string | undefined;
    visitReason?: string | undefined;
    visitStatus!: number;
    empNo?: string | undefined;

    constructor(data?: IVisitHistoryInputVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.visitorName = data["VisitorName"];
            this.visitorPhone = data["VisitorPhone"];
            this.visitReason = data["VisitReason"];
            this.visitStatus = data["VisitStatus"];
            this.empNo = data["EmpNo"];
        }
    }

    static fromJS(data: any): VisitHistoryInputVM {
        data = typeof data === 'object' ? data : {};
        let result = new VisitHistoryInputVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["VisitorName"] = this.visitorName;
        data["VisitorPhone"] = this.visitorPhone;
        data["VisitReason"] = this.visitReason;
        data["VisitStatus"] = this.visitStatus;
        data["EmpNo"] = this.empNo;
        return data; 
    }

    clone(): VisitHistoryInputVM {
        const json = this.toJSON();
        let result = new VisitHistoryInputVM();
        result.init(json);
        return result;
    }
}

export interface IVisitHistoryInputVM {
    visitorName?: string | undefined;
    visitorPhone?: string | undefined;
    visitReason?: string | undefined;
    visitStatus: number;
    empNo?: string | undefined;
}

export class Dictionary implements IDictionary {
    iD!: number;
    category?: string | undefined;
    name?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    isEnabled!: number;

    constructor(data?: IDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.category = data["Category"];
            this.name = data["Name"];
            this.value = data["Value"];
            this.description = data["Description"];
            this.isEnabled = data["IsEnabled"];
        }
    }

    static fromJS(data: any): Dictionary {
        data = typeof data === 'object' ? data : {};
        let result = new Dictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Category"] = this.category;
        data["Name"] = this.name;
        data["Value"] = this.value;
        data["Description"] = this.description;
        data["IsEnabled"] = this.isEnabled;
        return data; 
    }

    clone(): Dictionary {
        const json = this.toJSON();
        let result = new Dictionary();
        result.init(json);
        return result;
    }
}

export interface IDictionary {
    iD: number;
    category?: string | undefined;
    name?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    isEnabled: number;
}

export class Member implements IMember {
    iD!: number;
    name?: string | undefined;
    phone?: string | undefined;
    money!: number;
    number!: number;
    type!: number;
    createDate!: Date;
    updateDate!: Date;
    remark?: string | undefined;
    whiteSpiritMoney!: number;
    cashMoney!: number;
    whiteSpiritNumber!: number;
    whiteSpiritType!: number;

    constructor(data?: IMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.name = data["name"];
            this.phone = data["phone"];
            this.money = data["money"];
            this.number = data["number"];
            this.type = data["type"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.whiteSpiritMoney = data["whiteSpiritMoney"];
            this.cashMoney = data["cashMoney"];
            this.whiteSpiritNumber = data["whiteSpiritNumber"];
            this.whiteSpiritType = data["whiteSpiritType"];
        }
    }

    static fromJS(data: any): Member {
        data = typeof data === 'object' ? data : {};
        let result = new Member();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["money"] = this.money;
        data["number"] = this.number;
        data["type"] = this.type;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["whiteSpiritMoney"] = this.whiteSpiritMoney;
        data["cashMoney"] = this.cashMoney;
        data["whiteSpiritNumber"] = this.whiteSpiritNumber;
        data["whiteSpiritType"] = this.whiteSpiritType;
        return data; 
    }

    clone(): Member {
        const json = this.toJSON();
        let result = new Member();
        result.init(json);
        return result;
    }
}

export interface IMember {
    iD: number;
    name?: string | undefined;
    phone?: string | undefined;
    money: number;
    number: number;
    type: number;
    createDate: Date;
    updateDate: Date;
    remark?: string | undefined;
    whiteSpiritMoney: number;
    cashMoney: number;
    whiteSpiritNumber: number;
    whiteSpiritType: number;
}

export class Record implements IRecord {
    id!: number;
    memberId!: number;
    money?: string | undefined;
    createDate!: Date;
    description?: string | undefined;
    type!: number;

    constructor(data?: IRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.memberId = data["memberId"];
            this.money = data["money"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.description = data["Description"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): Record {
        data = typeof data === 'object' ? data : {};
        let result = new Record();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["memberId"] = this.memberId;
        data["money"] = this.money;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Description"] = this.description;
        data["type"] = this.type;
        return data; 
    }

    clone(): Record {
        const json = this.toJSON();
        let result = new Record();
        result.init(json);
        return result;
    }
}

export interface IRecord {
    id: number;
    memberId: number;
    money?: string | undefined;
    createDate: Date;
    description?: string | undefined;
    type: number;
}

export class AppAuthVM implements IAppAuthVM {
    authKey?: string | undefined;
    psw?: string | undefined;

    constructor(data?: IAppAuthVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authKey = data["AuthKey"];
            this.psw = data["Psw"];
        }
    }

    static fromJS(data: any): AppAuthVM {
        data = typeof data === 'object' ? data : {};
        let result = new AppAuthVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AuthKey"] = this.authKey;
        data["Psw"] = this.psw;
        return data; 
    }

    clone(): AppAuthVM {
        const json = this.toJSON();
        let result = new AppAuthVM();
        result.init(json);
        return result;
    }
}

export interface IAppAuthVM {
    authKey?: string | undefined;
    psw?: string | undefined;
}

export class EmplyoeeSearchVM implements IEmplyoeeSearchVM {
    page!: number;
    size!: number;
    name?: string | undefined;
    empNo?: string | undefined;
    dept?: string | undefined;

    constructor(data?: IEmplyoeeSearchVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["Page"];
            this.size = data["Size"];
            this.name = data["Name"];
            this.empNo = data["EmpNo"];
            this.dept = data["Dept"];
        }
    }

    static fromJS(data: any): EmplyoeeSearchVM {
        data = typeof data === 'object' ? data : {};
        let result = new EmplyoeeSearchVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page;
        data["Size"] = this.size;
        data["Name"] = this.name;
        data["EmpNo"] = this.empNo;
        data["Dept"] = this.dept;
        return data; 
    }

    clone(): EmplyoeeSearchVM {
        const json = this.toJSON();
        let result = new EmplyoeeSearchVM();
        result.init(json);
        return result;
    }
}

export interface IEmplyoeeSearchVM {
    page: number;
    size: number;
    name?: string | undefined;
    empNo?: string | undefined;
    dept?: string | undefined;
}

export class EmployeeInfo implements IEmployeeInfo {
    id!: number;
    empNo?: string | undefined;
    empName?: string | undefined;
    gender!: EnumGender;
    title?: string | undefined;
    officePhone?: string | undefined;
    personalPhone?: string | undefined;
    department?: string | undefined;
    level?: string | undefined;
    workPlace?: string | undefined;
    imgPath?: string | undefined;

    constructor(data?: IEmployeeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.empNo = data["EmpNo"];
            this.empName = data["EmpName"];
            this.gender = data["Gender"];
            this.title = data["Title"];
            this.officePhone = data["OfficePhone"];
            this.personalPhone = data["PersonalPhone"];
            this.department = data["Department"];
            this.level = data["Level"];
            this.workPlace = data["WorkPlace"];
            this.imgPath = data["ImgPath"];
        }
    }

    static fromJS(data: any): EmployeeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["EmpNo"] = this.empNo;
        data["EmpName"] = this.empName;
        data["Gender"] = this.gender;
        data["Title"] = this.title;
        data["OfficePhone"] = this.officePhone;
        data["PersonalPhone"] = this.personalPhone;
        data["Department"] = this.department;
        data["Level"] = this.level;
        data["WorkPlace"] = this.workPlace;
        data["ImgPath"] = this.imgPath;
        return data; 
    }

    clone(): EmployeeInfo {
        const json = this.toJSON();
        let result = new EmployeeInfo();
        result.init(json);
        return result;
    }
}

export interface IEmployeeInfo {
    id: number;
    empNo?: string | undefined;
    empName?: string | undefined;
    gender: EnumGender;
    title?: string | undefined;
    officePhone?: string | undefined;
    personalPhone?: string | undefined;
    department?: string | undefined;
    level?: string | undefined;
    workPlace?: string | undefined;
    imgPath?: string | undefined;
}

export enum EnumGender {
    Unknown = 0, 
    Male = 1, 
    Female = 2, 
}

export class UserUpdateVM implements IUserUpdateVM {
    id!: number;
    role!: number;
    comments?: string | undefined;
    account?: string | undefined;

    constructor(data?: IUserUpdateVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.role = data["Role"];
            this.comments = data["Comments"];
            this.account = data["Account"];
        }
    }

    static fromJS(data: any): UserUpdateVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Role"] = this.role;
        data["Comments"] = this.comments;
        data["Account"] = this.account;
        return data; 
    }

    clone(): UserUpdateVM {
        const json = this.toJSON();
        let result = new UserUpdateVM();
        result.init(json);
        return result;
    }
}

export interface IUserUpdateVM {
    id: number;
    role: number;
    comments?: string | undefined;
    account?: string | undefined;
}

export class UserAddVM implements IUserAddVM {
    role!: number;
    comments?: string | undefined;
    account?: string | undefined;

    constructor(data?: IUserAddVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["Role"];
            this.comments = data["Comments"];
            this.account = data["Account"];
        }
    }

    static fromJS(data: any): UserAddVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Role"] = this.role;
        data["Comments"] = this.comments;
        data["Account"] = this.account;
        return data; 
    }

    clone(): UserAddVM {
        const json = this.toJSON();
        let result = new UserAddVM();
        result.init(json);
        return result;
    }
}

export interface IUserAddVM {
    role: number;
    comments?: string | undefined;
    account?: string | undefined;
}

export class UserTiketVM implements IUserTiketVM {
    serviceTicket?: string | undefined;
    serviceUrl?: string | undefined;

    constructor(data?: IUserTiketVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.serviceTicket = data["ServiceTicket"];
            this.serviceUrl = data["ServiceUrl"];
        }
    }

    static fromJS(data: any): UserTiketVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserTiketVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ServiceTicket"] = this.serviceTicket;
        data["ServiceUrl"] = this.serviceUrl;
        return data; 
    }

    clone(): UserTiketVM {
        const json = this.toJSON();
        let result = new UserTiketVM();
        result.init(json);
        return result;
    }
}

export interface IUserTiketVM {
    serviceTicket?: string | undefined;
    serviceUrl?: string | undefined;
}

export class HistorySearchVM implements IHistorySearchVM {
    page!: number;
    size!: number;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    visitName?: string | undefined;
    employeeName?: string | undefined;
    checkInType!: CheckInType;

    constructor(data?: IHistorySearchVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["Page"];
            this.size = data["Size"];
            this.startTime = data["StartTime"] ? new Date(data["StartTime"].toString()) : <any>undefined;
            this.endTime = data["EndTime"] ? new Date(data["EndTime"].toString()) : <any>undefined;
            this.visitName = data["VisitName"];
            this.employeeName = data["EmployeeName"];
            this.checkInType = data["CheckInType"];
        }
    }

    static fromJS(data: any): HistorySearchVM {
        data = typeof data === 'object' ? data : {};
        let result = new HistorySearchVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page;
        data["Size"] = this.size;
        data["StartTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["EndTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["VisitName"] = this.visitName;
        data["EmployeeName"] = this.employeeName;
        data["CheckInType"] = this.checkInType;
        return data; 
    }

    clone(): HistorySearchVM {
        const json = this.toJSON();
        let result = new HistorySearchVM();
        result.init(json);
        return result;
    }
}

export interface IHistorySearchVM {
    page: number;
    size: number;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    visitName?: string | undefined;
    employeeName?: string | undefined;
    checkInType: CheckInType;
}

export enum CheckInType {
    CheckIn = 0, 
    FindEmp = 1, 
    Call = 2, 
}

export class VisitReasonInfo implements IVisitReasonInfo {
    id!: number;
    visitReason?: string | undefined;

    constructor(data?: IVisitReasonInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.visitReason = data["VisitReason"];
        }
    }

    static fromJS(data: any): VisitReasonInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VisitReasonInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["VisitReason"] = this.visitReason;
        return data; 
    }

    clone(): VisitReasonInfo {
        const json = this.toJSON();
        let result = new VisitReasonInfo();
        result.init(json);
        return result;
    }
}

export interface IVisitReasonInfo {
    id: number;
    visitReason?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(q: ng.IQService, message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): ng.IPromise<any> {
    if(result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            resolve(this.result);
        }
        reader.readAsText(blob); 
    });
}

//